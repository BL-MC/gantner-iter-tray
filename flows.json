[
    {
        "id": "281e0a510310e9c6",
        "type": "tab",
        "label": "qvantum-q65llb3-tray",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "24d6701c4857e25e",
        "type": "group",
        "z": "281e0a510310e9c6",
        "name": "Edit Me",
        "style": {
            "stroke": "#001f60",
            "fill": "#9363b7",
            "label": true,
            "label-position": "n",
            "color": "#ffff00"
        },
        "nodes": [
            "fcc98447c16c3949"
        ],
        "x": 94,
        "y": 279,
        "w": 212,
        "h": 82
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a8c3caa0ff9b87d",
        "type": "modbus-client",
        "name": "Slave",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.0.10",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save tray config in Memory",
        "func": "msg.payload.watchdog.value = 0;\nglobal.set('tray', msg.payload);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "281e0a510310e9c6",
        "name": "Subscribe Settings",
        "topic": "$(MQTTSUBSCRIBE)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "read Tray",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "readTraydesc",
        "payload": "MQTTSUBSCRIBE",
        "payloadType": "env",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "4a8d91e8.fcb68",
        "type": "file in",
        "z": "281e0a510310e9c6",
        "name": "Read tray config",
        "filename": "tray.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 60,
        "wires": [
            [
                "4b0be623.7f7b88"
            ]
        ]
    },
    {
        "id": "4b0be623.7f7b88",
        "type": "json",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 60,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar trayProps = {\n    box         :   mqttSplit[0],\n    type        :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nglobal.set('trayProps',trayProps);\nreturn {topic: 'readFile', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 60,
        "wires": [
            [
                "4a8d91e8.fcb68"
            ]
        ]
    },
    {
        "id": "168ce872.83d788",
        "type": "file",
        "z": "281e0a510310e9c6",
        "name": "Init Settings",
        "filename": "tray.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "89892a30.598e28",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save Settings to File",
        "func": "var jsonPretty = JSON.stringify(global.get('tray'),null,2);\nreturn {topic: msg.payload, payload:jsonPretty};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "168ce872.83d788"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 200,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "c0939e4a.6386f",
        "type": "exec",
        "z": "281e0a510310e9c6",
        "command": "pm2 restart ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart",
        "x": 700,
        "y": 1120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9e290594.69c548",
        "type": "switch",
        "z": "281e0a510310e9c6",
        "name": "Reset Tray",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "985cd59b3e414efe"
            ],
            [
                "236a8168.66f7fe"
            ]
        ]
    },
    {
        "id": "236a8168.66f7fe",
        "type": "exec",
        "z": "281e0a510310e9c6",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 500,
        "y": 1180,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "557e4f40.b904e",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1140,
        "wires": [
            [
                "9e290594.69c548"
            ]
        ]
    },
    {
        "id": "5152879001ec63ea",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1230,
        "y": 340,
        "wires": []
    },
    {
        "id": "4493527757138cdc",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "New Setting In",
        "links": [
            "4bddb9a0e424ebf4"
        ],
        "x": 735,
        "y": 140,
        "wires": []
    },
    {
        "id": "4bddb9a0e424ebf4",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "blinkybus setting in",
        "links": [
            "4493527757138cdc",
            "ed0bb779fa7acca6",
            "0cd853d250156bc1"
        ],
        "x": 55,
        "y": 320,
        "wires": [
            [
                "fcc98447c16c3949"
            ]
        ]
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "4493527757138cdc"
            ],
            [
                "91cded1b31446957"
            ],
            [
                "c81b72b9290d1c36"
            ],
            [
                "72b5ca0e2043aba0"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "f75b9887786b11c4",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = global.get('tray');\nvar newMsg = \n{\n    topic: global.get('trayProps').box + '/' + global.get('trayProps').type + '/' + global.get('trayProps').name + '/reading',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "5152879001ec63ea"
            ]
        ]
    },
    {
        "id": "45a97566b65c65cc",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "1e34df4b19ff22cc",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "91cded1b31446957",
            "a66ef2e5b482662a",
            "df03212a7e41deb1",
            "f0c1e263384a520f",
            "f5d0568e288098ed",
            "3fc0261f194a7067",
            "396e4a58f43bbdef"
        ],
        "x": 935,
        "y": 340,
        "wires": [
            [
                "f75b9887786b11c4"
            ]
        ]
    },
    {
        "id": "91cded1b31446957",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Ping Out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 735,
        "y": 180,
        "wires": []
    },
    {
        "id": "c81b72b9290d1c36",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Config Out",
        "links": [
            "720ccfb4b4949146"
        ],
        "x": 735,
        "y": 220,
        "wires": []
    },
    {
        "id": "720ccfb4b4949146",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Pause Tray Readings in",
        "links": [
            "c81b72b9290d1c36"
        ],
        "x": 35,
        "y": 520,
        "wires": [
            [
                "47de6287cc26419f"
            ]
        ]
    },
    {
        "id": "47de6287cc26419f",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save config file",
        "func": "let cubeAlarm = global.get('tray')[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'trayConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 520,
        "wires": [
            [
                "501090a1fd5f88f5",
                "df03212a7e41deb1"
            ]
        ]
    },
    {
        "id": "04d132d87ffeb91a",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Save Settings to file in",
        "links": [
            "6af21e76e0c4ad80",
            "501090a1fd5f88f5",
            "1e34df4b19ff22cc",
            "75aab98047eea696",
            "344a2a68c26672b2",
            "9f8c3b4630e734a3",
            "d627c61f63b32aba"
        ],
        "x": 935,
        "y": 420,
        "wires": [
            [
                "89892a30.598e28"
            ]
        ]
    },
    {
        "id": "df03212a7e41deb1",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Continue Devie Readings out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 395,
        "y": 480,
        "wires": []
    },
    {
        "id": "c2d22bcc1f4cf7b0",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "6a9b2f2af2f7d084"
            ]
        ]
    },
    {
        "id": "6a9b2f2af2f7d084",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Archive Pulse",
        "func": "var tray = global.get('tray');\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 880,
        "wires": [
            [
                "d74e019a27b1a659"
            ]
        ]
    },
    {
        "id": "72b5ca0e2043aba0",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Reset Out",
        "links": [
            "6c366c9b4d8b8f19"
        ],
        "x": 735,
        "y": 260,
        "wires": []
    },
    {
        "id": "6c366c9b4d8b8f19",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Reset in",
        "links": [
            "72b5ca0e2043aba0"
        ],
        "x": 55,
        "y": 1140,
        "wires": [
            [
                "557e4f40.b904e"
            ]
        ]
    },
    {
        "id": "6af76a294daa96eb",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save flow env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": []
    },
    {
        "id": "10e54acd6f4f5fb4",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "pm2Name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "pm2Name",
        "payload": "PM2NAME",
        "payloadType": "env",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "6af76a294daa96eb"
            ]
        ]
    },
    {
        "id": "985cd59b3e414efe",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Get pm2Name",
        "func": "msg.payload = global.get(\"pm2Name\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "c0939e4a.6386f"
            ]
        ]
    },
    {
        "id": "fd6a29d4dda908dd",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "76d6712bed883108"
            ]
        ]
    },
    {
        "id": "76d6712bed883108",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 940,
        "wires": [
            [
                "d74e019a27b1a659"
            ]
        ]
    },
    {
        "id": "501090a1fd5f88f5",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Save config file out",
        "links": [
            "04d132d87ffeb91a"
        ],
        "x": 395,
        "y": 520,
        "wires": []
    },
    {
        "id": "45409b1230e854cd",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 760,
        "y": 880,
        "wires": []
    },
    {
        "id": "d74e019a27b1a659",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = global.get('tray');\nvar newMsg = \n{\n    topic: global.get('trayProps').box + '/' + global.get('trayProps').type + '/' + global.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 880,
        "wires": [
            [
                "45409b1230e854cd"
            ]
        ]
    },
    {
        "id": "fcc98447c16c3949",
        "type": "function",
        "z": "281e0a510310e9c6",
        "g": "24d6701c4857e25e",
        "name": "Create Setting",
        "func": "var tray = global.get('tray');\ntray[msg.payload.cube].value = msg.payload.value;\nreturn { topic: 'newSetting', payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 320,
        "wires": [
            [
                "1e34df4b19ff22cc"
            ]
        ]
    },
    {
        "id": "14df468d12919153",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "25e72125efa7bdfa"
            ]
        ]
    },
    {
        "id": "25e72125efa7bdfa",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1360,
        "wires": [
            [
                "24f4af945e29f7c6"
            ]
        ]
    },
    {
        "id": "8e6f8bd3a932bc3d",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Init+20sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "24f4af945e29f7c6"
            ]
        ]
    },
    {
        "id": "a93e00778571e31f",
        "type": "json",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 1460,
        "wires": [
            [
                "fb8cf079f15bee62"
            ]
        ]
    },
    {
        "id": "fb8cf079f15bee62",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save espotPrice",
        "func": "global.set('espotPrice',msg.payload)\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1460,
        "wires": []
    },
    {
        "id": "24f4af945e29f7c6",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Spot Price Ping",
        "topic": "$(SPOTPRICEPING)",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 460,
        "y": 1300,
        "wires": []
    },
    {
        "id": "15b4a7808207ead4",
        "type": "mqtt in",
        "z": "281e0a510310e9c6",
        "name": "Spot Price Reading",
        "topic": "$(SPOTPRICEREADING)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1460,
        "wires": [
            [
                "a93e00778571e31f"
            ]
        ]
    },
    {
        "id": "a1698f8bfcc63203",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "readTable",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "bfb2ae23375de0ae"
            ]
        ]
    },
    {
        "id": "99fbe8135d0ce161",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Readings Alarm Scan",
        "func": "var newData = msg.payload;\nvar tray = global.get('tray');\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nvar newMsg   = null;\nif (newData)\n{\n    newMsg = \n    {\n        topic: 'newData',\n        payload: true\n    }\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 720,
        "wires": [
            [
                "f5d0568e288098ed"
            ]
        ]
    },
    {
        "id": "f5d0568e288098ed",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Alarm Scan out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 1435,
        "y": 720,
        "wires": []
    },
    {
        "id": "1e34df4b19ff22cc",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Setting Out",
        "mode": "link",
        "links": [
            "04d132d87ffeb91a",
            "45a97566b65c65cc"
        ],
        "x": 355,
        "y": 320,
        "wires": []
    },
    {
        "id": "bfb2ae23375de0ae",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Setup Read Holding 20-136",
        "func": "var modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 20 , 'quantity': 117 } ;\nreturn {topic: \"h_20_117\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 640,
        "wires": [
            [
                "9c84627a90a0bb85"
            ]
        ]
    },
    {
        "id": "9c84627a90a0bb85",
        "type": "modbus-flex-getter",
        "z": "281e0a510310e9c6",
        "name": "Read Modbus",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "4a8c3caa0ff9b87d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 560,
        "y": 640,
        "wires": [
            [],
            [
                "742a890ac8fe3017"
            ]
        ]
    },
    {
        "id": "386db633a1f7401c",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Holding 20 to 136",
        "func": "let tray = global.get('tray');\ntray.startLevelCompressor.value     = checkData(msg.payload.data[0], 1);\ntray.stopLevelCompressor.value      = checkData(msg.payload.data[1], 1);\ntray.analogComp0.value              = checkData(msg.payload.data[2], 1);\ntray.analogComp100.value            = checkData(msg.payload.data[3], 1);\ntray.startLevelTillsats.value       = checkData(msg.payload.data[4], 1);\ntray.startTempHeatIn.value          = checkData(msg.payload.data[10], 10);\ntray.startTempHeatInHy.value        = checkData(msg.payload.data[11], 10);\ntray.startTempHotWater.value        = checkData(msg.payload.data[13], 10);\ntray.startTempHotWaterHy.value      = checkData(msg.payload.data[14], 10);\ntray.solenoidSet.value              = checkData(msg.payload.data[16], 10);\ntray.solenoidStop.value             = checkData(msg.payload.data[17], 10);\ntray.curve0C.value                  = checkData(msg.payload.data[20], 10);\ntray.curve20C.value                 = checkData(msg.payload.data[21], 10);\ntray.summerDownDelay.value          = checkData(msg.payload.data[25], 1);\ntray.summStopTemp.value             = checkData(msg.payload.data[26], 10);\ntray.minBegrIntro.value             = checkData(msg.payload.data[28], 10);\ntray.maxBegrIntro.value             = checkData(msg.payload.data[29], 10);\ntray.defrostBlocking.value          = checkData(msg.payload.data[31], 10);\ntray.defrostLoadTemp.value          = checkData(msg.payload.data[33], 10);\ntray.outTempBlock.value             = checkData(msg.payload.data[34], 10);\ntray.fanSet.value                   = checkData(msg.payload.data[100], 1);\ntray.fanMax.value                   = checkData(msg.payload.data[104], 10);\ntray.LB3ValveMax.value              = checkData(msg.payload.data[113], 10);\ntray.LB3ValveSet.value              = checkData(msg.payload.data[114], 10);\ntray.LB3ValveDelay.value            = checkData(msg.payload.data[116], 1);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 560,
        "wires": [
            [
                "abb72e8f7ab115e3"
            ]
        ]
    },
    {
        "id": "abb72e8f7ab115e3",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Setup Read Holding 202",
        "func": "var modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 202 , 'quantity': 1 } ;\nreturn { topic: \"h_202_202\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 560,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "1b248eea812fabd1",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Holding 202",
        "func": "let tray = global.get('tray');\ntray.defrostMaxTime.value     = checkData(msg.payload.data[0], 1);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 600,
        "wires": [
            [
                "42daebaf3cb6a4e5"
            ]
        ]
    },
    {
        "id": "42daebaf3cb6a4e5",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Setup Read Holding 2032 - 2054",
        "func": "var modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 2032 , 'quantity': 23 } ;\nreturn { topic: \"h_2032_2054\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 600,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "ed94891d3263d8d9",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Holding 2032-2054",
        "func": "let tray = global.get('tray');\ntray.extSetpoint.value      = checkData(msg.payload.data[0],  10);\ntray.extOutsideTemp.value   = checkData(msg.payload.data[1],  10);\ntray.externalBlocking.value = checkData(msg.payload.data[22], 1);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 640,
        "wires": [
            [
                "61732e8d6c809d6a"
            ]
        ]
    },
    {
        "id": "61732e8d6c809d6a",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Setup Read Input 1300-1304",
        "func": "var modeBusCommand = { 'fc': 0x4, 'unitid': 1, 'address': 1300 , 'quantity': 5 } ;\nreturn { topic: \"i_1300_1304\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 640,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "aee8f924f8d9a2bc",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Input 1300-1304",
        "func": "let tray = global.get('tray');\ntray.lowPressure.value     = checkData(msg.payload.data[0], 10);\ntray.suctionGas.value      = checkData(msg.payload.data[1], 10);\ntray.evapTemp.value        = checkData(msg.payload.data[4], 10);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 680,
        "wires": [
            [
                "489507fab5c7633c"
            ]
        ]
    },
    {
        "id": "489507fab5c7633c",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Setup Read Input 2001-2063",
        "func": "var modeBusCommand = { 'fc': 0x4, 'unitid': 1, 'address': 2001 , 'quantity': 63 } ;\nreturn { topic: \"i_2001_2063\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 680,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "a768236db09f5f6b",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Input 2001-2063",
        "func": "let tray = global.get('tray');\ntray.defrostTank.value        = checkData(msg.payload.data[0], 10);\ntray.coolIn.value             = checkData(msg.payload.data[1], 10);\ntray.coolOut.value            = checkData(msg.payload.data[2], 10);\ntray.heatIn.value             = checkData(msg.payload.data[3], 10);\ntray.heatOut.value            = checkData(msg.payload.data[4], 10);\ntray.hotGas.value             = checkData(msg.payload.data[5], 10);\ntray.radiatorFeed.value       = checkData(msg.payload.data[6], 10);\ntray.hotWater.value           = checkData(msg.payload.data[7], 10);\ntray.outdoorTemp.value        = checkData(msg.payload.data[8], 10);\ntray.radiatorReturn.value     = checkData(msg.payload.data[9], 10);\ntray.curveSetPoint.value      = checkData(msg.payload.data[29], 10);\ntray.heatBalance.value        = checkData(msg.payload.data[30], 1);\ntray.afterTankSG.value        = checkData(msg.payload.data[59], 100);\ntray.evapFan.value            = checkData(msg.payload.data[60], 100);\ntray.condenserValve.value     = checkData(msg.payload.data[61], 100);\ntray.addHeatSG.value          = checkData(msg.payload.data[62], 100);\n\ntray.opStatus.value = msg.payload.data[53];\nlet aAlarm = msg.payload.data[49]\nlet aArray = getBits(aAlarm);\ntray.aAlarm.value            = aArray[0];\ntray.lowPressGas.value       = aArray[1];\ntray.highPressGas.value      = aArray[2];\ntray.fpCoolIn.value          = aArray[3];\ntray.heatCarryReturnIn.value = aArray[4];\ntray.hotGasHi.value          = aArray[5];\ntray.engineProtect.value     = aArray[6];\ntray.afans.value             = aArray[7];\ntray.masterComm.value        = aArray[8];\ntray.masterKBP.value         = aArray[9];\n\naAlarm = msg.payload.data[51]\naArray = getBits(aAlarm);\ntray.bAlarm.value               = aArray[0];\ntray.hiReturn.value             = aArray[1];\ntray.hiHotGas.value             = aArray[2];\ntray.evapFan1.value             = aArray[3];\ntray.evapFan2.value             = aArray[4];\ntray.lowOutTempStop.value       = aArray[5];\ntray.battery.value              = aArray[6];\ntray.aftCartridgeFuse.value     = aArray[7];\ntray.extPumpFuse.value          = aArray[8];\ntray.extAlarmB1.value           = aArray[9];\ntray.extAlarmB2.value           = aArray[10];\n\naArray = getBits(tray.opStatus.value);\ntray.compressor.value           = aArray[0];\ntray.coolantPump.value          = aArray[1];\ntray.defrostActive.value        = aArray[2];\ntray.heatCarrierPump.value      = aArray[3];\ntray.hotWaterDiverter.value     = aArray[4];\ntray.addHeat.value              = aArray[5];\ntray.radiatorPump.value         = aArray[6];\n\ntray.watchdog.value = tray.watchdog.value + 1;\nif (tray.watchdog.value > 32760) tray.watchdog.value = 0;\ntray.timeStamp = new Date().getTime();\n\nreturn {topic:'newData',payload:true};\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}\nfunction getBits(alarmNumber)\n{\n    let base2 = alarmNumber.toString(2);\n    let upBase2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (let ii = 0; ii < base2.length; ++ii) \n    {\n        upBase2[ii] = Number(base2[base2.length - ii - 1]);\n    }\n    return upBase2;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 720,
        "wires": [
            [
                "99fbe8135d0ce161"
            ]
        ]
    },
    {
        "id": "742a890ac8fe3017",
        "type": "switch",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "h_20_117",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "h_202_202",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "h_2032_2054",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "i_1300_1304",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "i_2001_2063",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 730,
        "y": 640,
        "wires": [
            [
                "386db633a1f7401c"
            ],
            [
                "1b248eea812fabd1"
            ],
            [
                "ed94891d3263d8d9"
            ],
            [
                "aee8f924f8d9a2bc"
            ],
            [
                "a768236db09f5f6b"
            ]
        ]
    },
    {
        "id": "03a043caa3e7abbf",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Read Modbus",
        "links": [
            "0820f3d0a0b2721e"
        ],
        "x": 445,
        "y": 700,
        "wires": [
            [
                "9c84627a90a0bb85"
            ]
        ]
    },
    {
        "id": "0820f3d0a0b2721e",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Setup Read",
        "mode": "link",
        "links": [
            "03a043caa3e7abbf"
        ],
        "x": 1435,
        "y": 620,
        "wires": []
    }
]