[
    {
        "id": "48709825f0f1e588",
        "type": "tab",
        "label": "blinky-power-relay-tray",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c4285970.3276d8",
        "type": "tab",
        "label": "web-app",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ca529822.9112f8",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "973fc413821dc233"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#FFAAAA",
        "icon": "font-awesome/fa-cloud"
    },
    {
        "id": "d41e41f275b927e5",
        "type": "subflow",
        "name": "Check Setting",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "55f27cce71dc97ae"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 80,
                "wires": [
                    {
                        "id": "55f27cce71dc97ae",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "5be30eeb12028815",
        "type": "subflow",
        "name": "Create Readings",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d369e8622472c557"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 60,
                "wires": [
                    {
                        "id": "d369e8622472c557",
                        "port": 0
                    }
                ]
            },
            {
                "x": 400,
                "y": 120,
                "wires": [
                    {
                        "id": "d369e8622472c557",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "c433c03d5378f519",
        "type": "subflow",
        "name": "Create Setting",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "c44772d5adbda3a5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "c44772d5adbda3a5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 100,
                "wires": [
                    {
                        "id": "c44772d5adbda3a5",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 160,
                "wires": [
                    {
                        "id": "c44772d5adbda3a5",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "3d760663a93ea82d",
        "type": "subflow",
        "name": "Init Cube",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "532a20586fa40278"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "532a20586fa40278",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cf9f84d0.6fba78",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "44b51478.9c022c",
        "type": "websocket-listener",
        "path": "/blinky-power-relay/websocket",
        "wholemsg": "false"
    },
    {
        "id": "799123a21f418b5c",
        "type": "serial-port",
        "serialport": "$(SERIALPORT)",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "$(SERIALBUFSIZE)",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "2000"
    },
    {
        "id": "b9df3f26.ab53f",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1370,
        "y": 40,
        "wires": [
            [
                "d1d9e12b.926ff"
            ]
        ]
    },
    {
        "id": "895ba39c.86e59",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 950,
        "y": 40,
        "wires": [
            [
                "a9a62959.7c01e8"
            ]
        ]
    },
    {
        "id": "aa17ff35.7cdfd",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 830,
        "y": 40,
        "wires": [
            [
                "895ba39c.86e59"
            ]
        ]
    },
    {
        "id": "d1d9e12b.926ff",
        "type": "http response",
        "z": "ca529822.9112f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1490,
        "y": 40,
        "wires": []
    },
    {
        "id": "c4ed2505.8c07e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 690,
        "y": 40,
        "wires": [
            [
                "aa17ff35.7cdfd"
            ]
        ]
    },
    {
        "id": "99bb1519.85fc18",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 40,
        "wires": [
            [
                "c4ed2505.8c07e8"
            ]
        ]
    },
    {
        "id": "a9a62959.7c01e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 1100,
        "y": 40,
        "wires": [
            [
                "35ffcf83.1547"
            ]
        ]
    },
    {
        "id": "35ffcf83.1547",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 40,
        "wires": [
            [
                "b9df3f26.ab53f"
            ]
        ]
    },
    {
        "id": "973fc413821dc233",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n        .googleSlide4by3-container \n        {\n            position: relative;\n            overflow: hidden;\n            padding-top: 75.0%;\n        }\n        .googleSlide4by3-iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: 0;\n        }        \n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "f70dc925de99c61c"
            ]
        ]
    },
    {
        "id": "f70dc925de99c61c",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <img src=\"/img/bl-mc-icon-inverse.png\" height=\"75px\"/>\n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/apps'><img src=\"/img/appsYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 280,
        "y": 40,
        "wires": [
            [
                "99bb1519.85fc18"
            ]
        ]
    },
    {
        "id": "55f27cce71dc97ae",
        "type": "function",
        "z": "d41e41f275b927e5",
        "name": "Check Setting",
        "func": "device = global.get('device');\ndevice.settingInProgress = 0;\nswitch(msg.payload.address)\n{\n    case 4:\n        device.nsamples.value = msg.payload.value;\n        break;\n    case 5:\n        device.nfilter.value = msg.payload.value;\n        break;\n    case 6:\n        device.powerOn.value = msg.payload.value;\n        break;\n    default:\n        break;\n}\nreturn {topic:'settingCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d369e8622472c557",
        "type": "function",
        "z": "5be30eeb12028815",
        "name": "Create Readings",
        "func": "var device = global.get('device');\nif (device.archiveNow > 0) return null;\nvar initCube             = msg.payload[0];\ndevice.power.value                  = Math.round(1.414 * 48000 * msg.payload[2] / msg.payload[1]) / 10;\ndevice.current.value                = Math.round(1.414 * 20000.0 * msg.payload[2] / msg.payload[1]) / 1000;\ndevice.adcSampleRate.value          = msg.payload[3] / 1000;\ndevice.nsamples.value               = msg.payload[4];\ndevice.nfilter.value                = msg.payload[5];\ndevice.powerOn.value                = msg.payload[6];\n\ndevice.espotPrice.value             = global.get('espotPrice').price.value;\nvar now = new Date();\nif (device.powerOn.value == 0)\n{\n    var espotPrice = global.get('espotPrice').futurePrice.value;\n    device.nextDayCostAvailable.value = 0;\n    if (espotPrice[0].length >= 23) device.nextDayCostAvailable.value = 1;\n    var lastMidnightDate = new Date(now.getTime());\n    lastMidnightDate.setHours(0)\n    lastMidnightDate.setMinutes(0);\n    lastMidnightDate.setSeconds(0);\n    lastMidnightDate.setMilliseconds(0);\n    var comingMidnightDate = new Date(lastMidnightDate.getTime());\n    comingMidnightDate.setHours(24);\n    \n    var startSearchDate = new Date(comingMidnightDate.getTime());\n    startSearchDate.setMinutes(device.startCostSearchTime.value);\n    if (device.startCostSearchTime.value > device.stopCostSearchTime.value)\n    {\n        startSearchDate = new Date(lastMidnightDate.getTime());\n        startSearchDate.setMinutes(device.startCostSearchTime.value);\n    }\n\n    var stopSearchDate = new Date(comingMidnightDate.getTime());\n    stopSearchDate.setMinutes(device.stopCostSearchTime.value);\n    \n    var searchDuration = Math.round((stopSearchDate.getTime() - startSearchDate.getTime()) / 60000);\n    if (device.costDuration.value > searchDuration) device.costDuration.value = searchDuration;\n    if (now.getTime() < startSearchDate.getTime())\n    {\n        if (stopSearchDate.getTime() < (espotPrice[0][espotPrice[0].length - 1] + 3540000) )\n        {\n            var hourIndexStart = 0;\n            while ((startSearchDate.getTime() > espotPrice[0][hourIndexStart]) && (hourIndexStart < espotPrice[0].length) )\n            {\n                hourIndexStart = hourIndexStart + 1\n            }\n            hourIndexStart = hourIndexStart - 1;\n            var numDurationHrs = Math.ceil(device.costDuration.value / 60);\n            var hourIndexStop = hourIndexStart + numDurationHrs - 1;\n            var minCostAvg = 10000000;\n            var minCostStartIndex = hourIndexStart;\n\n            while (espotPrice[0][hourIndexStop + 1] < stopSearchDate.getTime())\n            {\n                var costAvg = 0;\n                for (var ic = hourIndexStart; ic <= hourIndexStop; ++ ic) costAvg = costAvg + espotPrice[1][ic];\n                costAvg = costAvg / numDurationHrs;\n                if (costAvg < minCostAvg)\n                {\n                    minCostAvg = costAvg;\n                    minCostStartIndex = hourIndexStart;\n                }\n                hourIndexStart = hourIndexStart + 1;\n                hourIndexStop = hourIndexStart + numDurationHrs - 1;\n            }\n            var startCostTime = espotPrice[0][minCostStartIndex];\n            var stopCostTime = startCostTime + device.costDuration.value * 60 * 1000;\n            var avgCost = Math.round(1000 * minCostAvg) / 1000;\n            device.startCostTime.value = startCostTime;\n            device.stopCostTime.value = stopCostTime;\n            device.avgDurationCost.value = avgCost; \n            \n        }\n    }\n}\n\nvar initCubeMsg = null;\nif (initCube == 1)\n{\n    initCubeMsg = {topic:\"initCube\",payload:true};\n    device.settingInProgress = 1;\n}\nreturn  [{topic:'newSettingDone', payload:true},initCubeMsg];\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c44772d5adbda3a5",
        "type": "function",
        "z": "c433c03d5378f519",
        "name": "Create Setting",
        "func": "var device = global.get('device');\nvar blinkyBusSettingMsg = \n{\n    topic : msg.topic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nvar blinkyBusMessage = false;\nswitch(msg.payload.attr)\n{\n    case 'nsamples':\n        blinkyBusSettingMsg.payload.address = 4;\n        blinkyBusMessage = true;\n        break;\n    case 'nfilter':\n        blinkyBusSettingMsg.payload.address = 5;\n        blinkyBusMessage = true;\n        break;\n    case 'powerOn':\n        blinkyBusSettingMsg.payload.address = 6;\n        blinkyBusMessage = true;\n        break;\n    case 'opState':\n        device.opState.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'startScheduleTime':\n        device.startScheduleTime.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'stopScheduleTime':\n        device.stopScheduleTime.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'startCostSearchTime':\n        device.startCostSearchTime.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'stopCostSearchTime':\n        device.stopCostSearchTime.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'costDuration':\n        device.costDuration.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    case 'maxRate':\n        device.maxRate.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n    default:\n        break;\n}\nvar msgArray = [null,null,null];\nif (blinkyBusMessage)\n{\n    device.settingInProgress = 1;\n    var settingInProgressMsg = {topic:'settingInProgress', payload:true};\n    msgArray = [blinkyBusSettingMsg, settingInProgressMsg, null];\n    \n}\nelse\n{\n    device.settingInProgress = 0;\n    msgArray = [null,null,{topic:'settingDone', payload:true}];\n}\nreturn msgArray;\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "532a20586fa40278",
        "type": "function",
        "z": "3d760663a93ea82d",
        "name": "Init cube",
        "func": "var device = global.get('device');\nvar msgs = [];\nmsgs[0] = {\"address\":0,\"value\":0};\nmsgs[1] = {\"address\":4,\"value\":device.nsamples.value};\nmsgs[2] = {\"address\":5,\"value\":device.nfilter.value};\nmsgs[3] = {\"address\":6,\"value\":0}; //device.powerOn.value\n//must be the last!\nmsgs[4] = {\"address\":-1,\"value\":0};\nreturn {topic : 'initCube', payload: msgs};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "fa0221b683e33e1b",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Save device config in Memory",
        "func": "msg.payload.settingInProgress = 1;\nglobal.set('device', msg.payload);\nglobal.set('cubeInit', 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "88ee7aad66a538d0"
            ]
        ]
    },
    {
        "id": "88ac1505558f1a78",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "d5518f1f76059bdd"
            ]
        ]
    },
    {
        "id": "71c801eea8cb4d5b",
        "type": "file in",
        "z": "48709825f0f1e588",
        "name": "Read device config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 490,
        "y": 60,
        "wires": [
            [
                "f84b6b7ce585a55e"
            ]
        ]
    },
    {
        "id": "f84b6b7ce585a55e",
        "type": "json",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "fa0221b683e33e1b"
            ]
        ]
    },
    {
        "id": "d5518f1f76059bdd",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n    configFile  :   mqttSplit[1] + '-' + mqttSplit[2] + '.json',\n    mapFile     :   mqttSplit[1] + '-' + mqttSplit[2] + '-map.json'\n};\nglobal.set('deviceProps',deviceProps);\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "71c801eea8cb4d5b"
            ]
        ]
    },
    {
        "id": "ab09a7e6a3f13630",
        "type": "file",
        "z": "48709825f0f1e588",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "70366aa1da119af1",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Save Settings to File",
        "func": "var jsonPretty = JSON.stringify(global.get('device'),null,2);\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':global.get('deviceProps').configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 340,
        "wires": [
            [
                "ab09a7e6a3f13630"
            ]
        ]
    },
    {
        "id": "a92ac9c62e81bbe8",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Device A web socket in",
        "links": [
            "6a37b4ab.65c53c",
            "ea909034.6fb25"
        ],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "983b9b2385842c21"
            ]
        ]
    },
    {
        "id": "ca9c506f83f76d8e",
        "type": "json",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "24089761878cf14a"
            ]
        ]
    },
    {
        "id": "70ac7626f0dc2b08",
        "type": "exec",
        "z": "48709825f0f1e588",
        "command": "pm2 restart ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart",
        "x": 700,
        "y": 1460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "81ea9daf87c64eb4",
        "type": "switch",
        "z": "48709825f0f1e588",
        "name": "Reset Tray",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "ef49e103dd5a0607"
            ],
            [
                "08c377fc9781161b"
            ]
        ]
    },
    {
        "id": "08c377fc9781161b",
        "type": "exec",
        "z": "48709825f0f1e588",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 500,
        "y": 1580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2943124846cbf974",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "81ea9daf87c64eb4"
            ]
        ]
    },
    {
        "id": "ed606f193ee39535",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Readings Alarm Scan",
        "func": "if (!msg.payload) return null;\nvar device = global.get('device');\ndevice.linkQuality.value     = global.get('linkQuality');\ndevice.signalLevel.value     = global.get('signalLevel');\nvar alarmFlagReading = scalarAlarmScan(device, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(device, 'setting');\nvar newMsg = null;\nif (alarmFlagReading || alarmFlagSetting)\n{\n    newMsg = \n    {\n        topic: 'alarm',\n        payload: true\n    }\n}\nreturn newMsg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n            if (actionArray[ii].alarm.value > 0)  alarmFlag = true\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 600,
        "wires": [
            [
                "7207f74e078b1024"
            ]
        ]
    },
    {
        "id": "a3675017f40658b7",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Prepare MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 260,
        "wires": [
            [
                "e398177e1879092d"
            ]
        ]
    },
    {
        "id": "e398177e1879092d",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Device A web socket out",
        "links": [
            "833c12de.18f4f",
            "d033193d.436d68"
        ],
        "x": 1395,
        "y": 260,
        "wires": []
    },
    {
        "id": "943b834e2b9760ce",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "readTable",
        "payloadType": "date",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "f8faf0177d80f7de"
            ]
        ]
    },
    {
        "id": "087ee72f806fad5e",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "fa6d3e5fcb3b7456"
            ]
        ]
    },
    {
        "id": "708d28de25bef8e4",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "New Setting In",
        "links": [
            "28d2e18a23e7e8c8"
        ],
        "x": 755,
        "y": 140,
        "wires": []
    },
    {
        "id": "28d2e18a23e7e8c8",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "blinkybus setting in",
        "links": [
            "708d28de25bef8e4",
            "d5a6020f36a62f98"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "82686b0e7bf7e8be"
            ]
        ]
    },
    {
        "id": "cd1dbd77c92d6c17",
        "type": "switch",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 160,
        "wires": [
            [
                "708d28de25bef8e4"
            ],
            [
                "f6ecac4d7868271e"
            ],
            [
                "8436f4f009dbcce4"
            ],
            [
                "c5753140cc17814f"
            ]
        ]
    },
    {
        "id": "24089761878cf14a",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "cd1dbd77c92d6c17"
            ]
        ]
    },
    {
        "id": "c563f352a1464eb6",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Shift Msg",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "87e28861aa8114a4"
            ]
        ]
    },
    {
        "id": "87e28861aa8114a4",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Filter Websocket",
        "func": "var inputDeviceProps = msg.payload.topic.split('/');\nvar deviceProps = global.get('deviceProps')\nif (inputDeviceProps[0] != deviceProps.project) return null;\nif (inputDeviceProps[1] != deviceProps.deviceType) return null;\nif (inputDeviceProps[2] != deviceProps.name) return null;\nreturn {topic:msg.topic, payload:msg.payload.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "cd1dbd77c92d6c17"
            ]
        ]
    },
    {
        "id": "983b9b2385842c21",
        "type": "json",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "c563f352a1464eb6"
            ]
        ]
    },
    {
        "id": "f8faf0177d80f7de",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Read BlinkyBus",
        "func": "if (global.get('device').settingInProgress != 0) return null;\nif (global.get('cubeInit') != 0) return null;\nreturn {topic: \"readStatus\", payload:true};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "206936c306c36d58"
            ]
        ]
    },
    {
        "id": "e8d5af9fc399283d",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Publish device",
        "func": "if (!msg.payload) return null;\nvar device = global.get('device');\nvar newMsg = \n{\n    topic: global.get('deviceProps').project + '/' + global.get('deviceProps').deviceType + '/' + global.get('deviceProps').name + '/reading',\n    payload: JSON.stringify(device)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "a3675017f40658b7",
                "bb6fb364296efc1b"
            ]
        ]
    },
    {
        "id": "3ce73773dca036d4",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Publish Device In",
        "links": [
            "ffb6df457ee78e1d",
            "f6ecac4d7868271e",
            "42a8de7f2e975d0c",
            "5abe603978c260c9",
            "a7f6223a59f8f19a",
            "e7bc80b019993420",
            "9e94614641a50fe9",
            "40d2d599a9df7d29",
            "bb5875adbf70c906"
        ],
        "x": 915,
        "y": 220,
        "wires": [
            [
                "e8d5af9fc399283d"
            ]
        ]
    },
    {
        "id": "ffb6df457ee78e1d",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Alarm Scan out",
        "links": [
            "3ce73773dca036d4"
        ],
        "x": 1235,
        "y": 600,
        "wires": []
    },
    {
        "id": "f6ecac4d7868271e",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Ping Out",
        "links": [
            "3ce73773dca036d4"
        ],
        "x": 755,
        "y": 180,
        "wires": []
    },
    {
        "id": "42a8de7f2e975d0c",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Create Setting out",
        "links": [
            "3ce73773dca036d4"
        ],
        "x": 315,
        "y": 380,
        "wires": []
    },
    {
        "id": "459f7bdad3b3c51a",
        "type": "split",
        "z": "48709825f0f1e588",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1350,
        "y": 60,
        "wires": [
            [
                "6165bd77b529c239"
            ]
        ]
    },
    {
        "id": "6165bd77b529c239",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1500,
        "y": 60,
        "wires": [
            [
                "2ab0416be2e4068e"
            ]
        ]
    },
    {
        "id": "dceebd2914d7b50a",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Pause Device readings",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 520,
        "wires": [
            [
                "94d20943e20e46ef",
                "a7f6223a59f8f19a"
            ]
        ]
    },
    {
        "id": "8436f4f009dbcce4",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Config Out",
        "links": [
            "2eee74512358c0fd"
        ],
        "x": 755,
        "y": 220,
        "wires": []
    },
    {
        "id": "2eee74512358c0fd",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Pause Device Readings in",
        "links": [
            "8436f4f009dbcce4"
        ],
        "x": 55,
        "y": 520,
        "wires": [
            [
                "dceebd2914d7b50a"
            ]
        ]
    },
    {
        "id": "94d20943e20e46ef",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 520,
        "wires": [
            [
                "593cee1c51e6e988"
            ]
        ]
    },
    {
        "id": "593cee1c51e6e988",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Save config file",
        "func": "global.set('device',JSON.parse(JSON.stringify(msg.payload)));\nvar device = global.get('device');\ndevice.settingInProgress = 1;\n\nreturn {topic:'deviceConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "80a218ee281bc5f4",
                "943946e185e9b7fd"
            ]
        ]
    },
    {
        "id": "80a218ee281bc5f4",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 520,
        "wires": [
            [
                "4f08d6baae291814"
            ]
        ]
    },
    {
        "id": "4f08d6baae291814",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Continue Device readings",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "e7bc80b019993420"
            ]
        ]
    },
    {
        "id": "5abe603978c260c9",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Check blinkybus Setting out",
        "mode": "link",
        "links": [
            "7cfafca6fdd5721f",
            "3ce73773dca036d4"
        ],
        "x": 855,
        "y": 340,
        "wires": []
    },
    {
        "id": "7cfafca6fdd5721f",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Save Settings to file in",
        "links": [
            "5abe603978c260c9",
            "943946e185e9b7fd",
            "40d2d599a9df7d29",
            "014544a77ef3c7ec"
        ],
        "x": 935,
        "y": 340,
        "wires": [
            [
                "70366aa1da119af1"
            ]
        ]
    },
    {
        "id": "a7f6223a59f8f19a",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Pause Device Readings out",
        "links": [
            "3ce73773dca036d4"
        ],
        "x": 395,
        "y": 480,
        "wires": []
    },
    {
        "id": "943946e185e9b7fd",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Save config file out",
        "links": [
            "7cfafca6fdd5721f"
        ],
        "x": 775,
        "y": 480,
        "wires": []
    },
    {
        "id": "e7bc80b019993420",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Continue Devie Readings out",
        "links": [
            "3ce73773dca036d4"
        ],
        "x": 1175,
        "y": 520,
        "wires": []
    },
    {
        "id": "7207f74e078b1024",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "ffb6df457ee78e1d"
            ]
        ]
    },
    {
        "id": "5c17fe1ba1314e72",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "dbba3e236ef83ce0"
            ]
        ]
    },
    {
        "id": "dbba3e236ef83ce0",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Archive Pulse",
        "func": "var device = global.get('device');\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= device.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "9e94614641a50fe9"
            ]
        ]
    },
    {
        "id": "9e94614641a50fe9",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Archive Pulse Out",
        "links": [
            "3ce73773dca036d4"
        ],
        "x": 475,
        "y": 780,
        "wires": []
    },
    {
        "id": "c5753140cc17814f",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Reset Out",
        "links": [
            "a9abb55734b531b3"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "a9abb55734b531b3",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Reset in",
        "links": [
            "c5753140cc17814f"
        ],
        "x": 55,
        "y": 1540,
        "wires": [
            [
                "2943124846cbf974"
            ]
        ]
    },
    {
        "id": "40d2d599a9df7d29",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "7cfafca6fdd5721f",
            "3ce73773dca036d4"
        ],
        "x": 315,
        "y": 420,
        "wires": []
    },
    {
        "id": "41d56ddc72ee736d",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "a17ceea8465d6aa0"
            ]
        ]
    },
    {
        "id": "a17ceea8465d6aa0",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Single Archive Pulse",
        "func": "var device = global.get('device');\ndevice.archiveNow = 1;\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 840,
        "wires": [
            [
                "9e94614641a50fe9"
            ]
        ]
    },
    {
        "id": "bb6fb364296efc1b",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Check ArchiveNow",
        "func": "var device = global.get(\"device\");\nvar resetArchiveNowMsg = null;\nif (device.archiveNow > 0) resetArchiveNowMsg = {topic:\"resetArchiveNow\", payload:true};\nreturn [msg,resetArchiveNowMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 180,
        "wires": [
            [
                "13586c16d049597c"
            ],
            [
                "214442050f66a07f"
            ]
        ]
    },
    {
        "id": "214442050f66a07f",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1490,
        "y": 240,
        "wires": [
            [
                "b07d25c19eaef25b"
            ]
        ]
    },
    {
        "id": "b07d25c19eaef25b",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Reset ArchiveNow",
        "func": "global.get(\"device\").archiveNow = 0;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 240,
        "wires": []
    },
    {
        "id": "41d2792bed325710",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Allow Readings",
        "func": "if (msg.payload.address == -1)\n{\n    global.get(\"device\").settingInProgress = 0;\n    global.set('cubeInit', 0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bb5875adbf70c906",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Start Init Cube",
        "links": [
            "2150949730b4ba06",
            "3ce73773dca036d4"
        ],
        "x": 835,
        "y": 660,
        "wires": []
    },
    {
        "id": "9d69409cbab68184",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "begin re-init cube",
        "links": [
            "77e06a6def1887ea"
        ],
        "x": 1175,
        "y": 700,
        "wires": []
    },
    {
        "id": "b9a3285e2620ab13",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Set input filename",
        "func": "var deviceProps = global.get('deviceProps');\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "9d69409cbab68184"
            ]
        ]
    },
    {
        "id": "77e06a6def1887ea",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "read device config in",
        "links": [
            "9d69409cbab68184"
        ],
        "x": 355,
        "y": 100,
        "wires": [
            [
                "71c801eea8cb4d5b"
            ]
        ]
    },
    {
        "id": "6582611e89d5d6bf",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Save flow env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7eede03d75e8c3eb",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "serialBufSize",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "serialBufSize",
        "payload": "SERIALBUFSIZE",
        "payloadType": "env",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "6582611e89d5d6bf"
            ]
        ]
    },
    {
        "id": "33e6333244f3cf0c",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Send Setting",
        "func": "if (global.get('device').settingInProgress == -1) return null;\nglobal.get('device').settingInProgress = 1;\nvar bufsize = 4;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1, true); //setting\nsettingsView.setUint8(1, msg.payload.address, true); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:'setting',payload:Buffer.from(buffer),address:msg.payload.address};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 960,
        "wires": [
            [
                "828d866b8ea5da7b"
            ]
        ]
    },
    {
        "id": "828d866b8ea5da7b",
        "type": "serial request",
        "z": "48709825f0f1e588",
        "name": "Blinky-Bus",
        "serial": "799123a21f418b5c",
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "50fb13a6bd167956"
            ]
        ]
    },
    {
        "id": "65a81178e318390e",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Check Setting",
        "func": "var dataView     = new DataView(new ArrayBuffer(2));\nfor (ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[msg.address * 2 + 1 - ib]);\nvar setting = dataView.getInt16(0);\nreturn {topic:msg.topic,payload:{address:msg.address,value:setting}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 960,
        "wires": [
            [
                "a14b0c35aa618d2c"
            ]
        ]
    },
    {
        "id": "50fb13a6bd167956",
        "type": "switch",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reading",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "65a81178e318390e"
            ],
            [
                "f77648d66a738b10"
            ]
        ]
    },
    {
        "id": "9368c3c15c97efb3",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Get Reading",
        "func": "var bufsize = 4;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 0, true); //setting\nsettingsView.setUint8(1, 0, true); //address\nsettingsView.setInt16(2, 0, true); //value\n\nreturn {topic:'reading',payload:Buffer.from(buffer)};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "828d866b8ea5da7b"
            ]
        ]
    },
    {
        "id": "f77648d66a738b10",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Check Reading",
        "func": "var serialBufSize = global.get('serialBufSize');\nvar dataView     = new DataView(new ArrayBuffer(2));\nvar dataBuffer = [];\nfor (var ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nreturn {topic:msg.topic,payload:dataBuffer};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "06827cae56d671a7"
            ]
        ]
    },
    {
        "id": "fa4241c6d6f0447e",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "BlinkyBus Setting In",
        "links": [
            "01598091ca19387c",
            "fd30901533e8e0f5",
            "fa6d3e5fcb3b7456"
        ],
        "x": 55,
        "y": 960,
        "wires": [
            [
                "33e6333244f3cf0c"
            ]
        ]
    },
    {
        "id": "6a56053bbdf4f5a3",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "BlinkyBus Reading In",
        "links": [
            "6238aa4113faa347",
            "206936c306c36d58"
        ],
        "x": 55,
        "y": 1040,
        "wires": [
            [
                "9368c3c15c97efb3"
            ]
        ]
    },
    {
        "id": "a14b0c35aa618d2c",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "BlinkyBus Setting Out",
        "mode": "link",
        "links": [
            "51ab68bf6ce7ba49",
            "4ea6e52409c18ee0",
            "e5d7194cd54db79a"
        ],
        "x": 755,
        "y": 960,
        "wires": []
    },
    {
        "id": "06827cae56d671a7",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "BlinkyBus Reading Out",
        "mode": "link",
        "links": [
            "a3d99d9c796d9231",
            "720e6d1274c99e16"
        ],
        "x": 755,
        "y": 1040,
        "wires": []
    },
    {
        "id": "fd30901533e8e0f5",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Init cube setting in",
        "mode": "link",
        "links": [
            "fa4241c6d6f0447e"
        ],
        "x": 1755,
        "y": 60,
        "wires": []
    },
    {
        "id": "4ea6e52409c18ee0",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Init cube setting out",
        "links": [
            "a14b0c35aa618d2c"
        ],
        "x": 1835,
        "y": 60,
        "wires": [
            [
                "9e0a8cc2134a2b02"
            ]
        ]
    },
    {
        "id": "206936c306c36d58",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Poll BlinkBus In",
        "mode": "link",
        "links": [
            "6a56053bbdf4f5a3"
        ],
        "x": 415,
        "y": 640,
        "wires": []
    },
    {
        "id": "720e6d1274c99e16",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Poll BlinkBus Out",
        "links": [
            "06827cae56d671a7"
        ],
        "x": 555,
        "y": 640,
        "wires": [
            [
                "683056d98be80748"
            ]
        ]
    },
    {
        "id": "fa6d3e5fcb3b7456",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Device Setting In",
        "mode": "link",
        "links": [
            "fa4241c6d6f0447e"
        ],
        "x": 475,
        "y": 340,
        "wires": []
    },
    {
        "id": "e5d7194cd54db79a",
        "type": "link in",
        "z": "48709825f0f1e588",
        "name": "Device Setting Out",
        "links": [
            "a14b0c35aa618d2c"
        ],
        "x": 615,
        "y": 340,
        "wires": [
            [
                "295673f1cb55c1f3"
            ]
        ]
    },
    {
        "id": "7abae8efdddb4d6b",
        "type": "status",
        "z": "48709825f0f1e588",
        "name": "",
        "scope": [
            "828d866b8ea5da7b"
        ],
        "x": 100,
        "y": 1300,
        "wires": [
            [
                "8a4eb5a64b20dcaf"
            ]
        ]
    },
    {
        "id": "8a4eb5a64b20dcaf",
        "type": "switch",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "red",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 1300,
        "wires": [
            [
                "d0fcefca9059ad60"
            ],
            [
                "668176079c04e0e8"
            ]
        ]
    },
    {
        "id": "d0fcefca9059ad60",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Serial Not Connected",
        "func": "global.get('device').settingInProgress = -1;\nglobal.set('serialState', 0);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('serialState', 0);\n",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1260,
        "wires": []
    },
    {
        "id": "952f10fd0eb90650",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Reset Setting in Progress",
        "func": "if (global.get('device').settingInProgress == -1) \n{\n    if (global.get('serialState') == 1) global.get('device').settingInProgress = 0;\n    return msg;\n}\nelse\n{\n    return null;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "668176079c04e0e8",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Serial Connected",
        "func": "if (global.get('device') == undefined) return null;\nglobal.set('serialState', 1);\nif (global.get('device').settingInProgress != -1) return null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1340,
        "wires": [
            [
                "5439feadd33c5867"
            ]
        ]
    },
    {
        "id": "5439feadd33c5867",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "952f10fd0eb90650"
            ]
        ]
    },
    {
        "id": "4ae0ccf5c3c06683",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 700,
        "wires": [
            [
                "b9a3285e2620ab13"
            ]
        ]
    },
    {
        "id": "4be93c603f15f1f2",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "459f7bdad3b3c51a"
            ]
        ]
    },
    {
        "id": "15838fdacf10bf9e",
        "type": "catch",
        "z": "48709825f0f1e588",
        "name": "",
        "scope": [
            "65a81178e318390e",
            "f77648d66a738b10",
            "828d866b8ea5da7b"
        ],
        "uncaught": false,
        "x": 90,
        "y": 1240,
        "wires": [
            [
                "d0fcefca9059ad60"
            ]
        ]
    },
    {
        "id": "9e0a8cc2134a2b02",
        "type": "debug",
        "z": "48709825f0f1e588",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 60,
        "wires": []
    },
    {
        "id": "2ab0416be2e4068e",
        "type": "switch",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "payload.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 60,
        "wires": [
            [
                "fd30901533e8e0f5"
            ],
            [
                "95997d56bd8b8f4e"
            ]
        ]
    },
    {
        "id": "95997d56bd8b8f4e",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1800,
        "y": 120,
        "wires": [
            [
                "41d2792bed325710"
            ]
        ]
    },
    {
        "id": "9cb0275dbd5ae2a4",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "pm2Name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "pm2Name",
        "payload": "PM2NAME",
        "payloadType": "env",
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "6582611e89d5d6bf"
            ]
        ]
    },
    {
        "id": "ef49e103dd5a0607",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Get pm2Name",
        "func": "msg.payload = global.get(\"pm2Name\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1460,
        "wires": [
            [
                "70ac7626f0dc2b08"
            ]
        ]
    },
    {
        "id": "88ee7aad66a538d0",
        "type": "subflow:3d760663a93ea82d",
        "z": "48709825f0f1e588",
        "name": "",
        "x": 1060,
        "y": 60,
        "wires": [
            [
                "4be93c603f15f1f2"
            ]
        ]
    },
    {
        "id": "82686b0e7bf7e8be",
        "type": "subflow:c433c03d5378f519",
        "z": "48709825f0f1e588",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "087ee72f806fad5e"
            ],
            [
                "42a8de7f2e975d0c"
            ],
            [
                "40d2d599a9df7d29"
            ]
        ]
    },
    {
        "id": "683056d98be80748",
        "type": "subflow:5be30eeb12028815",
        "z": "48709825f0f1e588",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "ed606f193ee39535"
            ],
            [
                "bb5875adbf70c906",
                "4ae0ccf5c3c06683"
            ]
        ]
    },
    {
        "id": "295673f1cb55c1f3",
        "type": "subflow:d41e41f275b927e5",
        "z": "48709825f0f1e588",
        "x": 740,
        "y": 340,
        "wires": [
            [
                "5abe603978c260c9"
            ]
        ]
    },
    {
        "id": "cbb09f6d4cabb842",
        "type": "mqtt in",
        "z": "48709825f0f1e588",
        "name": "Subscribe DeviceA",
        "topic": "$(MQTTDEVICEA)",
        "qos": "0",
        "datatype": "auto",
        "broker": "cf9f84d0.6fba78",
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "ca9c506f83f76d8e"
            ]
        ]
    },
    {
        "id": "13586c16d049597c",
        "type": "mqtt out",
        "z": "48709825f0f1e588",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf9f84d0.6fba78",
        "x": 1490,
        "y": 180,
        "wires": []
    },
    {
        "id": "737be20a34acad28",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "Init + 4 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 1740,
        "wires": [
            [
                "e54567ce2424a703"
            ]
        ]
    },
    {
        "id": "e54567ce2424a703",
        "type": "exec",
        "z": "48709825f0f1e588",
        "command": "cat /etc/timezone",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "get timezone",
        "x": 290,
        "y": 1740,
        "wires": [
            [
                "9b51b2f090a65218"
            ],
            [],
            []
        ]
    },
    {
        "id": "9b51b2f090a65218",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Save Timezone",
        "func": "global.get('device').timezone.value = msg.payload.split('\\n')[0];\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1740,
        "wires": []
    },
    {
        "id": "e7cc28a9af8a70a8",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "Every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1900,
        "wires": [
            [
                "855b8bce51531943"
            ]
        ]
    },
    {
        "id": "855b8bce51531943",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 1900,
        "wires": [
            [
                "f70e217d22207c14",
                "0abc23fa1779f1eb"
            ]
        ]
    },
    {
        "id": "91ae5e8e75fe975c",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "Init+20sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 1840,
        "wires": [
            [
                "f70e217d22207c14"
            ]
        ]
    },
    {
        "id": "c33d8fcf7f84cb2d",
        "type": "json",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 2000,
        "wires": [
            [
                "d0a864cad1e85a40"
            ]
        ]
    },
    {
        "id": "d0a864cad1e85a40",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Save espotPrice",
        "func": "global.set('espotPrice',msg.payload)\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2000,
        "wires": []
    },
    {
        "id": "f70e217d22207c14",
        "type": "mqtt out",
        "z": "48709825f0f1e588",
        "name": "Spot Price Ping",
        "topic": "$(SPOTPRICEPING)",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf9f84d0.6fba78",
        "x": 460,
        "y": 1840,
        "wires": []
    },
    {
        "id": "a737a87c61ae2fb7",
        "type": "mqtt in",
        "z": "48709825f0f1e588",
        "name": "Spot Price Reading",
        "topic": "$(SPOTPRICEREADING)",
        "qos": "0",
        "datatype": "auto",
        "broker": "cf9f84d0.6fba78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 2000,
        "wires": [
            [
                "c33d8fcf7f84cb2d"
            ]
        ]
    },
    {
        "id": "73bc57cab61f1e56",
        "type": "inject",
        "z": "48709825f0f1e588",
        "name": "every 5 secs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "30",
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 2200,
        "wires": [
            [
                "3a73543982c58a42"
            ]
        ]
    },
    {
        "id": "3a73543982c58a42",
        "type": "switch",
        "z": "48709825f0f1e588",
        "name": "",
        "property": "device.opState.value",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 2200,
        "wires": [
            [
                "f3abb96ee6812a32"
            ],
            [
                "01379883a3b97875"
            ],
            [
                "69af8540cefc7c33"
            ]
        ]
    },
    {
        "id": "f3abb96ee6812a32",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Schedule Relay Control",
        "func": "var device = global.get('device');\nif (device.settingInProgress != 0) return null;\nvar now = new Date();\nvar minutes = now.getHours() * 60 + now.getMinutes();\nvar powerOn = 0;\nif (device.startScheduleTime.value > device.stopScheduleTime.value)\n{\n    if ((device.startScheduleTime.value <= minutes) && (minutes <= 1440) ) powerOn = 1;\n    if ((0 <= minutes) && (minutes < device.stopScheduleTime.value) )     powerOn = 1;\n}\nelse\n{\n    if ((device.startScheduleTime.value <= minutes) && (minutes < device.stopScheduleTime.value) ) powerOn = 1;\n}\nif (powerOn ==  device.powerOn.value) return null;\nreturn {topic : \"setting\", payload : {attr :\"powerOn\", value: powerOn} };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2160,
        "wires": [
            [
                "d5a6020f36a62f98"
            ]
        ]
    },
    {
        "id": "d5a6020f36a62f98",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Schedule Relay Control Out",
        "mode": "link",
        "links": [
            "28d2e18a23e7e8c8"
        ],
        "x": 695,
        "y": 2200,
        "wires": []
    },
    {
        "id": "01379883a3b97875",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Cost Relay Control",
        "func": "var device = global.get('device');\nif (device.settingInProgress != 0) return null;\nvar now = new Date();\nvar powerOn = 0;\nif ((device.startCostTime.value < now.getTime())  && (now.getTime() < device.stopCostTime.value) ) powerOn = 1;\nif (powerOn ==  device.powerOn.value) return null;\nreturn {topic : \"setting\", payload : {attr :\"powerOn\", value: powerOn} };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2200,
        "wires": [
            [
                "d5a6020f36a62f98"
            ]
        ]
    },
    {
        "id": "f25e12631a5ef0f6",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Write to file",
        "func": "return {topic:'newPriceReading', payload:true};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1900,
        "wires": [
            [
                "014544a77ef3c7ec"
            ]
        ]
    },
    {
        "id": "0abc23fa1779f1eb",
        "type": "delay",
        "z": "48709825f0f1e588",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 1900,
        "wires": [
            [
                "f25e12631a5ef0f6"
            ]
        ]
    },
    {
        "id": "014544a77ef3c7ec",
        "type": "link out",
        "z": "48709825f0f1e588",
        "name": "Delay after spot price Ping",
        "mode": "link",
        "links": [
            "7cfafca6fdd5721f"
        ],
        "x": 695,
        "y": 1900,
        "wires": []
    },
    {
        "id": "69af8540cefc7c33",
        "type": "function",
        "z": "48709825f0f1e588",
        "name": "Max Rate Relay Control",
        "func": "var device = global.get('device');\nif (device.settingInProgress != 0) return null;\nvar powerOn = 0;\nif (device.maxRate.value >= global.get('espotPrice').price.value)\n{\n    powerOn = 1;\n}\nif (powerOn ==  device.powerOn.value) return null;\nreturn {topic : \"setting\", payload : {attr :\"powerOn\", value: powerOn} };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2240,
        "wires": [
            [
                "d5a6020f36a62f98"
            ]
        ]
    },
    {
        "id": "68f91193.6031a",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Power Relay {{{payload.script.name}}}",
        "output": "str",
        "x": 340,
        "y": 460,
        "wires": [
            [
                "493fb622.d8afc8"
            ]
        ]
    },
    {
        "id": "6ff41f15.de1a2",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSwitch.png",
        "output": "str",
        "x": 350,
        "y": 420,
        "wires": [
            [
                "68f91193.6031a"
            ]
        ]
    },
    {
        "id": "cf44f6bf.8956b8",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 160,
        "y": 980,
        "wires": [
            [
                "ea909034.6fb25"
            ]
        ]
    },
    {
        "id": "62aaa250.9b67dc",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 950,
        "y": 980,
        "wires": []
    },
    {
        "id": "ea909034.6fb25",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "Web socket out",
        "links": [
            "2f289f87.fe2ff",
            "c7f3b5bf.85c9a8",
            "916409fc.7bc138",
            "080e8b7be1b3f16a",
            "a92ac9c62e81bbe8"
        ],
        "x": 395,
        "y": 980,
        "wires": []
    },
    {
        "id": "d033193d.436d68",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "Web socket in",
        "links": [
            "1cdcbcd8.9514e3",
            "78ceea9e.d0b204",
            "d0d46d90.cf476",
            "9c19993afce72c6e",
            "e398177e1879092d"
        ],
        "x": 755,
        "y": 980,
        "wires": [
            [
                "62aaa250.9b67dc"
            ]
        ]
    },
    {
        "id": "1482e22f.57fa2e",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay",
        "url": "/blinky-power-relay",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "71ce0943.81bf18"
            ]
        ]
    },
    {
        "id": "71ce0943.81bf18",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'blinky-power-relay';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "6ff41f15.de1a2"
            ]
        ]
    },
    {
        "id": "70be1872.dfaf48",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/apps",
        "url": "/apps",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "af9642ae.0c0da"
            ]
        ]
    },
    {
        "id": "b1885d32.8d9cc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n    <div class='container' width=\"100%\">\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/blinky-power-relay?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/yellowSwitch.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">Blinky Power Relay {{{payload.deviceAName}}}</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/setup\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/basicYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">Setup</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 830,
        "y": 260,
        "wires": [
            [
                "5ff3eca699d5dd8a"
            ]
        ]
    },
    {
        "id": "18e277b4.8fc208",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Power Relay",
        "output": "str",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "fd81c62c.98f018"
            ]
        ]
    },
    {
        "id": "f328fcb4.91dc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "18e277b4.8fc208"
            ]
        ]
    },
    {
        "id": "fd81c62c.98f018",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSwitch.png",
        "output": "str",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "b1885d32.8d9cc"
            ]
        ]
    },
    {
        "id": "f14573da.0a788",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "project",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 480,
        "y": 60,
        "wires": [
            [
                "938904a0.58d668"
            ]
        ]
    },
    {
        "id": "938904a0.58d668",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Save global env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "c634a8d3.297848",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "ca68de71.c19fe"
            ]
        ]
    },
    {
        "id": "65a7590b.59a2a8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n",
        "output": "str",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "22e0663b43e2f0b9"
            ]
        ]
    },
    {
        "id": "9709fa69.9daac8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Power Relay",
        "output": "str",
        "x": 550,
        "y": 200,
        "wires": [
            [
                "a36869fc.6f5e58"
            ]
        ]
    },
    {
        "id": "ca68de71.c19fe",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n            window.location = '/apps'\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "9709fa69.9daac8"
            ]
        ]
    },
    {
        "id": "a36869fc.6f5e58",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSwitch.png",
        "output": "str",
        "x": 690,
        "y": 200,
        "wires": [
            [
                "65a7590b.59a2a8"
            ]
        ]
    },
    {
        "id": "c87aa87d.aef928",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "fdfbcac7.35b388"
            ]
        ]
    },
    {
        "id": "fdfbcac7.35b388",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Init device name",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nflow.set(msg.topic + 'Props',deviceProps);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "af9642ae.0c0da",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Device Names",
        "func": "msg.payload['deviceAName'] = flow.get('deviceAProps').name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 260,
        "wires": [
            [
                "f328fcb4.91dc"
            ]
        ]
    },
    {
        "id": "ba79496e.4e42b8",
        "type": "exec",
        "z": "c4285970.3276d8",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1100,
        "y": 60,
        "wires": [
            [
                "25a2b2c8.26f4ce"
            ],
            [],
            []
        ]
    },
    {
        "id": "fc7d9351.a3d0a",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 940,
        "y": 60,
        "wires": [
            [
                "ba79496e.4e42b8"
            ]
        ]
    },
    {
        "id": "25a2b2c8.26f4ce",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStartIndex + 15));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStartIndex + 16));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nglobal.set('linkQuality',linkQuality);\nglobal.set('signalLevel', signalLevel);\nglobal.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "493fb622.d8afc8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var blinkyPowerRelayDevice = null;\n        var appDeviceInfo = \n        {\n            config:\n            {\n                deviceType  : '{{{payload.script.deviceType}}}',\n                name        : '{{{payload.script.name}}}',\n                project     : '{{{payload.script.project}}}'\n            },\n            device: null\n        };\n        var archiveRequestList = [];\n        var archiveList = [];\n        var archiveList = [];\n        var pingInterval = 2000;\n        var lastPing = 0;\n\n        var changingState = false;\n        var expertSettingsVisible = true;\n        var nsamplesChanged = false;\n        var nfilterChanged = false;\n        var startScheduleTimeChanged = false;\n        var stopScheduleTimeChanged = false;\n        var startCostSearchTimeChanged = false;\n        var stopCostSearchTimeChanged = false;\n        var costDurationChanged = false;\n        var maxRateChanged = false;\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            $('#archiveCardId').hide();\n            setInterval(ping, 1000);\n            $('#nsamplesButtonId').hide();\n            $('#nfilterButtonId').hide();\n            $('#startScheduleTimeButtonId').hide();\n            $('#stopScheduleTimeButtonId').hide();\n            $('#startCostSearchTimeButtonId').hide();\n            $('#stopCostSearchTimeButtonId').hide();\n            $('#costDurationButtonId').hide();\n            $('#maxRateButtonId').hide();\n           \n            $('#startScheduleTimeInputId').timepicker({});\n            $('#stopScheduleTimeInputId').timepicker({});\n            $('#startCostSearchTimeInputId').timepicker({});\n            $('#stopCostSearchTimeInputId').timepicker({});\n            $('#costDurationInputId').timepicker({\"showButtonPanel\":  false,\"showTitlePanel\":  false});\n\n            disableSettings(true);\n\n            $('#expertSettingsCard').hide();\n            expertSettingsVisible = false;\n            $('#expertSettingsButton').text(\"Show\");\n            $('#manualModeCard').hide();\n            $('#scheduleModeCard').hide();\n            $('#rateModeCard').hide();\n        }\n        function onWebSocketOpen()\n        {\n            if (remoteApp) getArchive(24);\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == appDeviceInfo.config.name) && (msg.mqttDevice.deviceType == appDeviceInfo.config.deviceType)  && (msg.mqttDevice.project == appDeviceInfo.config.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        appDeviceInfo.device = JSON.parse(msg.payload);\n                        updateDmaReadings(appDeviceInfo.device);\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                        if ((msg.payload.device.deviceType == appDeviceInfo.config.deviceType) && (msg.payload.device.name == appDeviceInfo.config.name) )\n                            putArchiveValues(msg.payload);\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function ping()\n        {\n            {\n                if (appDeviceInfo.device != null)\n                {\n                    if (appDeviceInfo.device.settingInProgress == 1) return;\n                }\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }        \n        }\n        function sendSetting(payload)\n        {\n            var actionMsg = \n                {\n                    topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/setting',\n                    payload : payload\n                };\n            sendActionMsg('setting','setting',actionMsg);\n        }\n        function reset(actionFlag)\n        {\n            var headerText = 'Warning';\n            var title = 'Resetting Tray';\n            var text = 'I hope you know what you are doing.';\n            var buttonTexts = ['Reset', 'Cancel'];\n            var buttonFunctions = \n            [\n                function()\n                {\n                    $( this ).dialog( \"close\" );\n                    var actionMsg = \n                        {\n                            topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/reset',\n                            payload : actionFlag\n                        };\n                    sendActionMsg('reset','setting',actionMsg);\n                 }, \n                function()\n                {\n                    $( this ).dialog( \"close\" );\n                }\n            ];\n            if (actionFlag == 2)\n            {\n                title = 'Rebooting Tray';\n                buttonTexts[0] = 'Reboot';\n            }\n            optionDialog(headerText, title, text, buttonTexts, buttonFunctions);\n            \n        }\n",
        "output": "str",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "e29616e2.2e2988"
            ]
        ]
    },
    {
        "id": "d51354fd.a03048",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.editDevice",
        "field": "payload.script.editDevice",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editDeviceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setDeviceConfig(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() \n                            {\n                                $( this ).dialog( \"close\" ); \n                            },\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function editDevice(attrName)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            editedAttribute = attrName;\n            $( \"#editDeviceDialogAttribute\").html(attrName);\n\n            var attr = appDeviceInfo.device[attrName];\n            $( \"#loloAlarm\").val(attr.alarm.limits.lolo);\n            $( \"#lowAlarm\").val(attr.alarm.limits.low);\n            $( \"#highAlarm\").val(attr.alarm.limits.high);\n            $( \"#hihiAlarm\").val(attr.alarm.limits.hihi);\n            $( \"#notifyName\").val(attr.alarm.notify.name);\n            $( \"#notifyNumber\").val(attr.alarm.notify.number);\n\n            $( \"#editDeviceDialog\" ).dialog( \"open\" );\n        }\n        function setDeviceConfig()\n        {\n            var attr = appDeviceInfo.device[editedAttribute];\n            if (isNaN($('#loloAlarm').val()) \n                || isNaN($('#lowAlarm').val()) \n                || isNaN($('#highAlarm').val()) \n                || isNaN($('#hihiAlarm').val()))\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', editedAttribute);\n                editedAttribute = '';\n                return;\n            }\n            editedAttribute = '';\n\n            attr.alarm.limits.lolo = Number($( \"#loloAlarm\").val());\n            attr.alarm.limits.low = Number($( \"#lowAlarm\").val());\n            attr.alarm.limits.high = Number($( \"#highAlarm\").val());\n            attr.alarm.limits.hihi = Number($( \"#hihiAlarm\").val());\n            attr.alarm.notify.number =  $( \"#notifyNumber\").val();\n            attr.alarm.notify.name = $( \"#notifyName\").val();\n            var actionMsg = \n                {\n                    topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/config',\n                    payload : appDeviceInfo.device\n                };\n            sendActionMsg('config','setting',actionMsg);\n        }\n",
        "output": "str",
        "x": 680,
        "y": 540,
        "wires": [
            [
                "6f5a5e46.8a941"
            ]
        ]
    },
    {
        "id": "9c813756.6c5c38",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.updateReadings}}}\n{{{payload.script.timePlot}}}\n{{{payload.script.archive}}}\n{{{payload.script.editDevice}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "f6ab8485.5f47e8"
            ]
        ]
    },
    {
        "id": "864cffa0.3724b",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width=\"100%\">\n{{{payload.html.dashboard}}}\n{{{payload.html.opModes}}}\n{{{payload.html.expert}}}\n{{{payload.html.timePlot}}}\n{{{payload.html.archive}}}\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.reset}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 970,
        "y": 700,
        "wires": [
            [
                "8aee90afb65f0a8f"
            ]
        ]
    },
    {
        "id": "cefdafa8.91d69",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 990,
        "y": 620,
        "wires": [
            [
                "3fb4b4a8.ec76fc"
            ]
        ]
    },
    {
        "id": "7974c464.11ebac",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.archive",
        "field": "payload.html.archive",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Archive HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card' id=archiveCardId>\n                    <p class='card-title'>Archive</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row' >\n                            <table width='100%'>\n                                <tr>\n                                    <td width='10%' align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive2hrButton\" onclick=\"getArchive(2)\" >2</button>\n                                    </td>\n                                    <td width='10%'  align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive4hrButton\" onclick=\"getArchive(4)\" >4</button>\n                                    </td>\n                                    <td width='10%'  align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive8hrButton\" onclick=\"getArchive(8)\" >8</button>\n                                    </td>\n                                    <td width='10%'  align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive24hrButton\" onclick=\"getArchive(24)\" >24</button>\n                                    </td>\n                                    <td width='10%' align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive72hrButton\" onclick=\"getArchive(72)\" >72</button>\n                                    </td>\n                                    <td width='10%' align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive168hrButton\" onclick=\"getArchive(168)\" >168</button>\n                                    </td>\n                                    <td width='10%' align='center'>\n                                        <span class='big-text' >Hours</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                        <div class='row vert-pad'>\n                            <div class='col-md-12'>\n                                <div id=\"archiveChart\" width=\"100%\" ></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 990,
        "y": 540,
        "wires": [
            [
                "4f8cafa.a57065"
            ]
        ]
    },
    {
        "id": "4f8cafa.a57065",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 980,
        "y": 580,
        "wires": [
            [
                "cefdafa8.91d69"
            ]
        ]
    },
    {
        "id": "6f5a5e46.8a941",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 670,
        "y": 580,
        "wires": [
            [
                "9c813756.6c5c38"
            ]
        ]
    },
    {
        "id": "3fb4b4a8.ec76fc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.reset",
        "field": "payload.html.reset",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='reset'>\n                    <div class='card-body' align=\"center\">\n                         <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='resetButton' onclick=\"reset(1)\" >Reset</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='rebootButton'onclick=\"reset(2)\" >Reboot</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 980,
        "y": 660,
        "wires": [
            [
                "864cffa0.3724b"
            ]
        ]
    },
    {
        "id": "f6ab8485.5f47e8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <p class='card-title'>Dashboard</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Power (W)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <span class='card-text'  id='powerId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Relay State</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <span class='card-text'  id='relayStateId' >?</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Spot Price (SEK/kW-hr)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <span class='card-text'  id='espotPriceId' >?</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                        <div class='row'>\n                            <table width='100%'>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"manualStateButton\" onclick=\"changeOpState(0)\">Manual Mode</button></td>\n                                    <td></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"scheduleStateButton\" onclick=\"changeOpState(1)\">Schedule Mode</button></td>\n                                    <td></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"costStateButton\" onclick=\"changeOpState(2)\">Duration Mode</button></td>\n                                    <td></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"maxRateStateButton\" onclick=\"changeOpState(3)\">Max. Rate Mode</button></td>\n                                    <td></td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n                <div id=\"editDeviceDialog\" title=\"Edit Device\" class='card'>\n                    <p class='card-title' id='editDeviceDialogAttribute'>Attribute</p>\n                    <div class='card-body'>\n                        <table>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LoLo</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"loloAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LOW</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"lowAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HIGH</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"highAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HiHi</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"hihiAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Name</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyName\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Number</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyNumber\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "0ca81e2717a6249c"
            ]
        ]
    },
    {
        "id": "e29616e2.2e2988",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.updateReadings",
        "field": "payload.script.updateReadings",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Update Readings Javascript\n        function updateDmaReadings()\n        {\n            if (appDeviceInfo.device.settingInProgress == 0)\n            {\n                disableSettings(false);\n            }\n            else\n            {\n                disableSettings(true);\n            }\n            $('#linkQualityId').text(appDeviceInfo.device.linkQuality.value);\n            $('#signalLevelId').text(appDeviceInfo.device.signalLevel.value);\n            $('#currentId').text(appDeviceInfo.device.current.value);\n            $('#powerId').text(appDeviceInfo.device.power.value);\n            $('#espotPriceId').text(appDeviceInfo.device.espotPrice.value.toFixed(2));\n            $('#powerExpertId').text(appDeviceInfo.device.power.value);\n            $('#adcSampleRateId').text(appDeviceInfo.device.adcSampleRate.value);\n            $('#timezoneId').text(appDeviceInfo.device.timezone.value);\n            $('#timezoneCostId').text(appDeviceInfo.device.timezone.value);\n            \n            var startCostTime = new Date(appDeviceInfo.device.startCostTime.value).toLocaleString('en-SE',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', '');\n            var stopCostTime  = new Date(appDeviceInfo.device.stopCostTime.value).toLocaleString('en-SE',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', '');\n            $('#startCostTimeId').text(startCostTime);\n            $('#stopCostTimeId').text(stopCostTime);\n            \n            $('#avgDurationCostId').text(appDeviceInfo.device.avgDurationCost.value.toString());\n            var nextDayCostAvailable = \"Available\" ;\n            if (appDeviceInfo.device.nextDayCostAvailable.value == 0) nextDayCostAvailable = \"Not Available\";\n            $('#nextDayCostAvailableId').text(nextDayCostAvailable);\n\n            if (!nsamplesChanged)$('#nsamplesInputId').val(appDeviceInfo.device.nsamples.value);\n            if (!nfilterChanged)$('#nfilterInputId').val(appDeviceInfo.device.nfilter.value);\n            if (!startScheduleTimeChanged) $('#startScheduleTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.startScheduleTime.value));\n            if (!stopScheduleTimeChanged) $('#stopScheduleTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.stopScheduleTime.value));\n            if (!startCostSearchTimeChanged) $('#startCostSearchTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.startCostSearchTime.value));\n            if (!stopCostSearchTimeChanged) $('#stopCostSearchTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.stopCostSearchTime.value));\n            if (!costDurationChanged)$('#costDurationInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.costDuration.value));\n            if (!maxRateChanged)$('#maxRateInputId').val(appDeviceInfo.device.maxRate.value);\n\n            var buttonColor = '#00ff00';\n            var buttonTextColor = '#000000';\n            var buttonText = \"Off\";\n            var relayStateTextColor = \"white\";\n            if (appDeviceInfo.device.powerOn.value > 0) \n            {\n                buttonColor = '#ff0000';\n                buttonText = 'On';\n                relayStateTextColor = buttonColor;\n            }\n            $('#relayStateId').css('color', relayStateTextColor);\n            $('#relayStateId').text(buttonText);\n            $('#powerOnButtonId').css('color', buttonTextColor); \n            $('#powerOnButtonId').css('background-color', buttonColor); \n            $('#powerOnButtonId').text(buttonText); \n\n            if (!changingState)\n            {\n                switch(appDeviceInfo.device.opState.value) \n                {\n                  case 0:\n                    $('#manualStateButton').css(\"background-color\", \"green\");\n                    $('#scheduleStateButton').css(\"background-color\", \"white\");\n                    $('#costStateButton').css(\"background-color\", \"white\");\n                    $('#maxRateStateButton').css(\"background-color\", \"white\");\n                    $('#manualModeCard').show();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').hide();\n                    $('#maxRateModeCard').hide();\n                    break;\n                  case 1:\n                    // code block\n                    $('#manualStateButton').css(\"background-color\", \"white\");\n                    $('#scheduleStateButton').css(\"background-color\", \"green\");\n                    $('#costStateButton').css(\"background-color\", \"white\");\n                    $('#maxRateStateButton').css(\"background-color\", \"white\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').show();\n                    $('#costModeCard').hide();\n                    $('#maxRateModeCard').hide();\n                    break;\n                  case 2:\n                    // code block\n                    $('#manualStateButton').css(\"background-color\", \"white\");\n                    $('#scheduleStateButton').css(\"background-color\", \"white\");\n                    $('#costStateButton').css(\"background-color\", \"green\");\n                    $('#maxRateStateButton').css(\"background-color\", \"white\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').show();\n                    $('#maxRateModeCard').hide();\n                    break;\n                  case 3:\n                    $('#manualStateButton').css(\"background-color\", \"white\");\n                    $('#scheduleStateButton').css(\"background-color\", \"white\");\n                    $('#costStateButton').css(\"background-color\", \"white\");\n                    $('#maxRateStateButton').css(\"background-color\", \"green\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').hide();\n                    $('#maxRateModeCard').show();\n                    break;\n                  default:\n                    // code block\n                    $('#manualStateButton').css(\"background-color\", \"grey\");\n                    $('#scheduleStateButton').css(\"background-color\", \"grey\");\n                    $('#costStateButton').css(\"background-color\", \"grey\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').hide();\n                }            \n                \n            }\n            addTracePointsToTimePlot([appDeviceInfo.device.power.value,appDeviceInfo.device.powerOn.value]);\n\n        }\n        function minutesAfterMidnightToTimeString(minutesAfterMidnight)\n        {\n            var hours = Math.floor(minutesAfterMidnight / 60);\n            var minutes = minutesAfterMidnight - (hours * 60);\n            var hourText = hours.toString();\n            if (hours < 10) hourText = '0' + hourText;\n            var minuteText = minutes.toString();\n            if (minutes < 10) minuteText = '0' + minuteText;\n            return hourText + \":\" + minuteText;\n        }\n        function timeStringToMinutesAfterMidnight(timeString)\n        {\n            var startTimeArray = timeString.split(':');\n            return Number(startTimeArray[0]) * 60 + Number(startTimeArray[1]);\n         }\n        function disableSettings(disable)\n        {\n            $('#nfilterInputId').attr('disabled',disable);\n            $('#nsamplesInputId').attr('disabled',disable);\n            $('#startScheduleTimeInputId').attr('disabled',disable);\n            $('#powerOnButtonId').attr('disabled',disable);\n            $('#manualStateButton').attr('disabled',disable);\n            $('#scheduleStateButton').attr('disabled',disable);\n            $('#costStateButton').attr('disabled',disable);\n            $('#maxRateStateButton').attr('disabled',disable);\n\n            $('#resetButton').attr('disabled',disable);\n            $('#rebootButton').attr('disabled',disable);\n\n        }\n        function powerOn()\n        {\n            if (appDeviceInfo.device.powerOn.value > 0)\n            {\n                appDeviceInfo.device.powerOn.value = 0;\n            }\n            else\n            {\n                appDeviceInfo.device.powerOn.value = 1;\n                \n            }\n            $('#ledOnButtonId').css('color', 'black'); \n            $('#ledOnButtonId').css('background-color', 'grey'); \n            $('#ledOnButtonId').text('?'); \n            var payload = {'attr': 'powerOn', 'value':appDeviceInfo.device.powerOn.value};\n            sendSetting(payload);\n        }\n        function nsamplesChange()\n        {\n            nsamplesChanged = true;\n            $('#nsamplesButtonId').show();\n        }\n        function nfilterChange()\n        {\n            nfilterChanged = true;\n            $('#nfilterButtonId').show();\n        }\n        function startScheduleTimeChange()\n        {\n            startScheduleTimeChanged = true;\n            $('#startScheduleTimeButtonId').show();\n        }\n        function stopScheduleTimeChange()\n        {\n            stopScheduleTimeChanged = true;\n            $('#stopScheduleTimeButtonId').show();\n        }\n        function startCostSearchTimeChange()\n        {\n            startCostSearchTimeChanged = true;\n            $('#startCostSearchTimeButtonId').show();\n        }\n        function stopCostSearchTimeChange()\n        {\n            stopCostSearchTimeChanged = true;\n            $('#stopCostSearchTimeButtonId').show();\n        }\n        function costDurationChange()\n        {\n            costDurationChanged = true;\n            $('#costDurationButtonId').show();\n        }\n        function maxRateChange()\n        {\n            maxRateChanged = true;\n            $('#maxRateButtonId').show();\n        }\n        function nsamples()\n        {\n            $('#nsamplesButtonId').hide();\n            if (isNaN($('#nsamplesInputId').val()))\n            {\n                nsamplesChanged = false;\n                return;\n            }\n            var payload = {'attr': 'nsamples', 'value':Number($('#nsamplesInputId').val())};\n            sendSetting(payload);\n            nsamplesChanged = false;\n        }\n        function nfilter()\n        {\n            $('#nfilterButtonId').hide();\n            if (isNaN($('#nfilterInputId').val()))\n            {\n                nfilterChanged = false;\n                return;\n            }\n            var payload = {'attr': 'nfilter', 'value':Number($('#nfilterInputId').val())};\n            sendSetting(payload);\n            nfilterChanged = false;\n        }\n        function startScheduleTime()\n        {\n            $('#startScheduleTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#startScheduleTimeInputId').val());\n            var payload = {'attr': 'startScheduleTime', 'value':minutes};\n            sendSetting(payload);\n            startScheduleTimeChanged = false;\n        }\n        function stopScheduleTime()\n        {\n            $('#stopScheduleTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#stopScheduleTimeInputId').val());\n            var payload = {'attr': 'stopScheduleTime', 'value':minutes};\n            sendSetting(payload);\n            stopScheduleTimeChanged = false;\n        }\n        function startCostSearchTime()\n        {\n            $('#startCostSearchTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#startCostSearchTimeInputId').val());\n            var payload = {'attr': 'startCostSearchTime', 'value':minutes};\n            sendSetting(payload);\n            startCostSearchTimeChanged = false;\n        }\n        function stopCostSearchTime()\n        {\n            $('#stopCostSearchTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#stopCostSearchTimeInputId').val());\n            var payload = {'attr': 'stopCostSearchTime', 'value':minutes};\n            sendSetting(payload);\n            stopCostSearchTimeChanged = false;\n        }\n        function costDuration()\n        {\n            $('#costDurationButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#costDurationInputId').val());\n            var payload = {'attr': 'costDuration', 'value':minutes};\n            sendSetting(payload);\n            costDurationChanged = false;\n        }\n        function maxRate()\n        {\n            $('#maxRateButtonId').hide();\n            if (isNaN($('#maxRateInputId').val()))\n            {\n                maxRateChanged = false;\n                return;\n            }\n            var payload = {'attr': 'maxRate', 'value':Number($('#maxRateInputId').val())};\n            sendSetting(payload);\n            maxRateChanged = false;\n        }\n        function expertSettings()\n        {\n            if (expertSettingsVisible)\n            {\n                $('#expertSettingsCard').hide();\n                $('#expertSettingsButton').text('Show');\n                expertSettingsVisible = false;\n            }\n            else\n            {\n                $('#expertSettingsCard').show();\n                $('#expertSettingsButton').text('Hide');\n                expertSettingsVisible = true;\n            }\n        }\n        function changeOpState(state)\n        {\n            var payload = {'attr': 'opState', 'value':state};\n            sendSetting(payload);\n        }\n ",
        "output": "str",
        "x": 700,
        "y": 420,
        "wires": [
            [
                "ea72affbdba78c7b"
            ]
        ]
    },
    {
        "id": "8a2cca551d64f879",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.archive",
        "field": "payload.script.archive",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Archive JavaScript\n        function getArchive(hours)\n        { \n            $('#archiveCardId').show();\n            $('#archive2hrButton').attr(\"disabled\", true); \n            $('#archive4hrButton').attr(\"disabled\", true); \n            $('#archive8hrButton').attr(\"disabled\", true); \n            $('#archive24hrButton').attr(\"disabled\", true); \n            $('#archive72hrButton').attr(\"disabled\", true); \n            $('#archive168hrButton').attr(\"disabled\", true); \n            $('#archive2hrButton').css('color', 'var(--color5)'); \n            $('#archive2hrButton').css('background-color', 'var(--color1)'); \n            $('#archive4hrButton').css('color', 'var(--color5)'); \n            $('#archive4hrButton').css('background-color', 'var(--color1)'); \n            $('#archive8hrButton').css('color', 'var(--color5)'); \n            $('#archive8hrButton').css('background-color', 'var(--color1)'); \n            $('#archive24hrButton').css('color', 'var(--color5)'); \n            $('#archive24hrButton').css('background-color', 'var(--color1)'); \n            $('#archive72hrButton').css('color', 'var(--color5)'); \n            $('#archive72hrButton').css('background-color', 'var(--color1)'); \n            $('#archive168hrButton').css('color', 'var(--color5)'); \n            $('#archive168hrButton').css('background-color', 'var(--color1)'); \n            switch(hours)\n            {\n                case 2:\n                    $('#archive2hrButton').css('color', 'var(--color1)'); \n                    $('#archive2hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 4:\n                    $('#archive4hrButton').css('color', 'var(--color1)'); \n                    $('#archive4hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 8:\n                    $('#archive8hrButton').css('color', 'var(--color1)'); \n                    $('#archive8hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 24:\n                    $('#archive24hrButton').css('color', 'var(--color1)'); \n                    $('#archive24hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 72:\n                    $('#archive72hrButton').css('color', 'var(--color1)'); \n                    $('#archive72hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 168:\n                    $('#archive168hrButton').css('color', 'var(--color1)'); \n                    $('#archive168hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                default:\n                // code block\n            }\n\n            archiveRequestList = [];\n            archiveList = [];\n            var stopDate = new Date().getTime();\n            var startDate = stopDate - hours * 3600000;\n            archiveRequestList[0] = \n            {\n                deviceType : appDeviceInfo.config.deviceType,\n                name : appDeviceInfo.config.name, \n                attr : ['power','powerOn'],\n                startDate: startDate, \n                stopDate: stopDate,\n            };\n            getArchiveValues();\n\n        }\n        function getArchiveValues()\n        {\n            var actionMsg = \n                {\n                    device      : archiveRequestList[0]\n                };\n            sendActionMsg('readDatabase','readDatabase', actionMsg);\n            archiveRequestList.shift();\n            return;\n        }\n        function putArchiveValues(data)\n        {\n            archiveList.push(data);\n            if (archiveRequestList.length > 0)\n            {\n                getArchiveValues();\n            }\n            else\n            {\n                plotArchive();\n            }\n        }\n\n        function plotArchive()\n        {\n            var layout =\n            {\n                showlegend  : true,\n                legend      : \n                { \n                    x: 0, y: 1.15,\n                    font: {size:20}\n                },\n                height      : '600',\n                width       : '',\n                xaxis       :\n                {\n                    type: 'date',\n                    tickangle       : '90',\n                    tickfont        : {size: 30},\n                    tickformat: \"%H:%M\\n%b-%d\"\n                },\n                yaxis:\n                {\n                    title           : 'Power (W)',\n                    titlefont       : {color: '#557a95',size: 30},\n                    tickfont        : {color: '#557a95',size: 30},\n                    gridcolor       : '#beceda',\n                    zerolinecolor   : '#beceda',\n                    linecolor       : '#beceda',\n                    rangemode       : 'tozero'\n                },\n    \n                yaxis2:\n                {\n                    title           : 'Relay',\n                    titlefont       : {color: '#f2a31f',size: 30},\n                    tickfont        : {color: '#f2a31f',size: 30},\n                    gridcolor       : '#f2a31f',\n                    zerolinecolor   : '#f2a31f',\n                    linecolor       : '#f2a31f',\n                    overlaying: 'y',\n                    side: 'right',\n                    range: [0, 2],\n                    dtick: 1\n                },\n                margin: \n                {\n                    t: 30, //top margin\n                    l: 150, //left margin\n                    r: 100, //right margin\n                    b: 130 //bottom margin\n                }\n            };\n            var archivePlotTraces = [];\n            archivePlotTraces[0] = \n            {\n                x: [],\n                y: [],\n                name: 'Power',\n                yaxis: 'y1',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'blue'}\n        \n            };\n            archivePlotTraces[1] = \n            {\n                x: [],\n                y: [],\n                name: 'Relay State',\n                yaxis: 'y2',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'red'}\n        \n            };\n            for (var ii = 0; ii < archiveList[0].trace.length; ++ii)\n            {\n                var x = archiveList[0].trace[ii].timeStamp;\n                for (var it = 0; it < archivePlotTraces.length; ++it)\n                {\n                    archivePlotTraces[it].x[ii] = x;\n                    archivePlotTraces[it].y[ii] = archiveList[0].trace[ii][archiveList[0].device.attr[it]] ;\n                }\n             }\n\n\n            Plotly.newPlot('archiveChart', archivePlotTraces, layout);\n            $('#archive2hrButton').attr(\"disabled\", false); \n            $('#archive4hrButton').attr(\"disabled\", false); \n            $('#archive8hrButton').attr(\"disabled\", false); \n            $('#archive24hrButton').attr(\"disabled\", false); \n            $('#archive72hrButton').attr(\"disabled\", false); \n            $('#archive168hrButton').attr(\"disabled\", false); \n        }\n",
        "output": "str",
        "x": 670,
        "y": 500,
        "wires": [
            [
                "d51354fd.a03048"
            ]
        ]
    },
    {
        "id": "ea72affbdba78c7b",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.timePlot",
        "field": "payload.script.timePlot",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Archive JavaScript\n        var timePlotLength = 600000;\n        var timePlotLayout =\n        {\n            showlegend  : true,\n            legend      : \n            { \n                x: 0, y: 1.15,\n                font: {size:20}\n            },\n            height      : '600',\n            width       : '',\n            xaxis       :\n            {\n                type: 'date',\n                tickangle       : '0',\n                tickfont        : {size: 30}\n             },\n            yaxis:\n            {\n                title           : 'Power (W)',\n                titlefont       : {color: '#557a95',size: 30},\n                tickfont        : {color: '#557a95',size: 30},\n                gridcolor       : '#beceda',\n                zerolinecolor   : '#beceda',\n                linecolor       : '#beceda',\n//                range: [0, 1000],\n//                dtick: 250\n                rangemode       : 'tozero'\n            },\n\n            yaxis2:\n            {\n                title           : 'Relay',\n                titlefont       : {color: '#f2a31f',size: 30},\n                tickfont        : {color: '#f2a31f',size: 30},\n                gridcolor       : '#f2a31f',\n                zerolinecolor   : '#f2a31f',\n                linecolor       : '#f2a31f',\n                overlaying: 'y',\n                side: 'right',\n                range: [0, 2],\n                dtick: 1\n            },\n\n            margin: \n                {\n                    t: 30, //top margin\n                    l: 150, //left margin\n                    r: 100, //right margin\n                    b: 100 //bottom margin\n                }\n        };\n        var timePlotTraces = [];\n        timePlotTraces[0] = \n        {\n            x: [],\n            y: [],\n            name: 'Power',\n            yaxis: 'y1',\n            type: 'scatter',\n            mode: 'lines',\n            line: {color: 'blue'}\n    \n        };\n        timePlotTraces[1] = \n        {\n            x: [],\n            y: [],\n            name: 'Relay State',\n            yaxis: 'y2',\n            type: 'scatter',\n            mode: 'lines',\n            line: {color: 'red'}\n    \n        };\n        function addTracePointsToTimePlot(pts)\n        {\n            var now = new Date().getTime();\n            var plotBeginning = now - timePlotLength;\n            var removeDone = false;\n            while(!removeDone)\n            {\n                if (timePlotTraces[0].x[0] < plotBeginning)\n                {\n                    for (var ii = 0; ii < timePlotTraces.length; ++ii)\n                    {\n                        timePlotTraces[ii].x.shift();\n                        timePlotTraces[ii].y.shift();\n                    }\n                }\n                else\n                {\n                    removeDone = true;\n                }\n            }\n            for (var ii = 0; ii < timePlotTraces.length; ++ii)\n            {\n                timePlotTraces[ii].x.push(now);\n                timePlotTraces[ii].y.push(pts[ii]);\n            }    \n            Plotly.newPlot(\"timePlotChart\", timePlotTraces, timePlotLayout);\n        }\n\n",
        "output": "str",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "8a2cca551d64f879"
            ]
        ]
    },
    {
        "id": "64b8974a8d469849",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.timePlot",
        "field": "payload.html.timePlot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <p class='card-title'>Time Plot</p>\n                    <div class='card-body' align=\"center\">\n                        <div id=\"timePlotChart\" width=\"100%\" ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 990,
        "y": 500,
        "wires": [
            [
                "7974c464.11ebac"
            ]
        ]
    },
    {
        "id": "0ca81e2717a6249c",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.opModes",
        "field": "payload.html.opModes",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;' id=\"manualModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"manualModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                 <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Power On/Off</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block big-text' style='background-color:grey;color:black' id='powerOnButtonId' onclick=\"powerOn()\" >?</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;' id=\"scheduleModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"scheduleModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Time zone</span>\n                                    </td>\n                                    <td width='40%' align='left'>\n                                        <span class='card-text'  id='timezoneId' >?</span>\n                                    </td>\n                                    <td width='20%' align='right'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Start Time</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"startScheduleTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"startScheduleTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"startScheduleTimeButtonId\" onclick=\"startScheduleTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Stop Time</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"stopScheduleTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"stopScheduleTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"stopScheduleTimeButtonId\" onclick=\"stopScheduleTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;' id=\"costModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"costModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                 <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Time zone</span>\n                                    </td>\n                                    <td width='40%' align='left'>\n                                        <span class='card-text'  id='timezoneCostId' >?</span>\n                                    </td>\n                                    <td width='20%' align='right'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Start Search</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"startCostSearchTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"startCostSearchTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"startCostSearchTimeButtonId\" onclick=\"startCostSearchTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Stop Search</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"stopCostSearchTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"stopCostSearchTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"stopCostSearchTimeButtonId\" onclick=\"stopCostSearchTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Duration</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"costDurationInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"costDurationChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"costDurationButtonId\" onclick=\"costDuration()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Relay On</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='startCostTimeId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Relay Off</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='stopCostTimeId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Avg. Rate (SEK/kW-hr)</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='avgDurationCostId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('avgDurationCost')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Next Day Cost Profile</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='nextDayCostAvailableId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;' id=\"maxRateModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"maxRateModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%'>\n                                        <span class='card-text' >Max. Rate (SEK/kW-hr)</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <input id=\"maxRateInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"maxRateChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"maxRateButtonId\" onclick=\"maxRate()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "65433ddfa7ef28b2"
            ]
        ]
    },
    {
        "id": "65433ddfa7ef28b2",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.expert",
        "field": "payload.html.expert",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='row'>\n                        <div class='col-md-2'>\n                        </div>\n                        <div class='col-md-8'>\n                            <p class='card-title'>Expert Settings</p>\n                         </div>\n                        <div class='col-md-2'>\n                            <button class='btn btn-block card-button big-text' id=\"expertSettingsButton\" onclick=\"expertSettings()\" >Hide</button>\n                        </div>\n                    </div>\n                    <div class='card-body' id=\"expertSettingsCard\" align=\"center\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Power (W)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text'  id='powerExpertId' >-100</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('power')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Current (A)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text'  id='currentId' >-100</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('current')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Sample Rate (kHz)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text'  id='adcSampleRateId' >-100</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('adcSampleRate')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%'>\n                                        <span class='card-text' >Average Samples</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <input id=\"nsamplesInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"nsamplesChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"nsamplesButtonId\" onclick=\"nsamples()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%'>\n                                        <span class='card-text' >Line Filter Samples</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <input id=\"nfilterInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"nfilterChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"nfilterButtonId\" onclick=\"nfilter()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 990,
        "y": 460,
        "wires": [
            [
                "64b8974a8d469849"
            ]
        ]
    },
    {
        "id": "8aee90afb65f0a8f",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "extraCss",
        "field": "payload.extraCss",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        .ui-widget { font-size: 1.5em !important; }",
        "output": "str",
        "x": 1120,
        "y": 700,
        "wires": [
            [
                "d1a006c6f1b2b944"
            ]
        ]
    },
    {
        "id": "22e0663b43e2f0b9",
        "type": "subflow:ca529822.9112f8",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "5ff3eca699d5dd8a",
        "type": "subflow:ca529822.9112f8",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 950,
        "y": 260,
        "wires": []
    },
    {
        "id": "d1a006c6f1b2b944",
        "type": "subflow:ca529822.9112f8",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1250,
        "y": 700,
        "wires": []
    }
]